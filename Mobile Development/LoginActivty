class LoginActivity : AppCompatActivity() {
    private lateinit var binding: ActivityLoginBinding
    private val loginViewModel by viewModel<LoginViewModel>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityLoginBinding.inflate(layoutInflater)
        setContentView(binding.root)

        observeViewModel()
        setListeners()
    }

    private fun observeViewModel() {
        loginViewModel.apply {
            getToken().observe(this@LoginActivity) {
                if (it != SettingsPreferences.PREFERENCE_DEFAULT_VALUE) {
                    val iMain = Intent(this@LoginActivity, MainActivity::class.java)
                    finishAffinity()
                    startActivity(iMain)
                }
            }
            isLoading.observe(this@LoginActivity, ::showLoading)
            errorMessage.observe(this@LoginActivity, ::showToast)
        }
    }

    private fun setListeners() {
        binding.apply {
            btnLogin.setOnClickListener {
                if (edEmail.error.isNullOrEmpty().not() || edEmail.text.isNullOrEmpty()) {
                    showToast(ContextCompat.getString(this@LoginActivity, R.string.error_email))
                    return@setOnClickListener
                }

                if (edPassword.error.isNullOrEmpty().not() || edPassword.text.isNullOrEmpty()) {
                    showToast(ContextCompat.getString(this@LoginActivity, R.string.error_password))
                    return@setOnClickListener
                }

                loginViewModel.apply {
                    login(edEmail.text.toString(), edPassword.text.toString())
                        .observe(this@LoginActivity) { result ->
                            when (result) {
                                is Result.Loading -> isLoading.postValue(true)
                                is Result.Success -> {
                                    isLoading.postValue(false)
                                    saveToken(result.data.loginResult.token)
                                }

                                is Result.Error -> {
                                    isLoading.postValue(false)
                                    errorMessage.postValue(result.error)
                                }
                            }
                        }
                }
            }


            btnRegister.setOnClickListener {
                startActivity(Intent(this@LoginActivity, RegisterActivity::class.java))
            }
        }
    }

    private fun showLoading(isLoading: Boolean) {
        binding.apply {
            progressbar.isVisible = isLoading
            btnLogin.isVisible = !isLoading
            edEmail.isEnabled = !isLoading
            edPassword.isEnabled = !isLoading
        }
    }


    private fun showToast(message: String) {
        Toast.makeText(this@LoginActivity, message, Toast.LENGTH_SHORT).show()
    }
}
